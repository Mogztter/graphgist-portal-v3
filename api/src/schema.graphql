type User {
  uuid: ID!
}

interface Asset {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String
}

type Person implements Asset {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String
  email: String

  twitter_username: String

  legacy_id: Int
  legacy_neo_id: Int

  postal_address: String
  tshirt_size: String
  tshirt_size_other: String

  authored_gists: [GraphGist] @relation(name: "WROTE", direction: "OUT")

  user: User @relation(name: "IS_PERSON", direction: "IN")
}

type Industry implements Asset {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String

  graphgist: GraphGist @relation(name: "FOR_INDUSTRY", direction: "IN")
  num_graphgists: Int
}

type UseCase implements Asset {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String

  graphgist: GraphGist @relation(name: "FOR_USE_CASE", direction: "IN")
  num_graphgists: Int
}

type Challenge implements Asset {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String

  start_date: DateTime
  end_date: DateTime
  graphgist: GraphGist @relation(name: "FOR_CHALLENGE", direction: "IN")
  num_graphgists: Int
}

enum GraphGistStatus {
  live
  disabled
  candidate
  draft
}

interface GraphGistInterface {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String

  author: Person @relation(name: "WROTE", direction: "IN")

  is_guide: Boolean

  url: String
  raw_url: String

  asciidoc: String!
  html: String!
  raw_html: String!
  neo4j_version: String

  query_cache: String!
  query_cache_html: String
  has_errors: Boolean!

  status: GraphGistStatus

  cached: Boolean

  legacy_id: String
  legacy_neo_id: Int
  legacy_poster_image: String
  legacy_rated: String

  created_at: DateTime
  updated_at: DateTime

  render_id: String

  industries: [Industry] @relation(name: "FOR_INDUSTRY", direction: "OUT")
  use_cases: [UseCase] @relation(name: "FOR_USE_CASE", direction: "OUT")
  challenges: [Challenge] @relation(name: "FOR_CHALLENGE", direction: "OUT")
}

type GraphGist implements GraphGistInterface & Asset {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String

  title: String

  author: Person @relation(name: "WROTE", direction: "IN")

  is_guide: Boolean

  url: String
  raw_url: String

  asciidoc: String!
  html: String!
  raw_html: String!
  neo4j_version: String

  query_cache: String!
  query_cache_html: String
  has_errors: Boolean!

  status: GraphGistStatus

  cached: Boolean

  legacy_id: String
  legacy_neo_id: Int
  legacy_poster_image: String
  legacy_rated: String

  created_at: DateTime
  updated_at: DateTime

  render_id: String

  industries: [Industry] @relation(name: "FOR_INDUSTRY", direction: "OUT")
  use_cases: [UseCase] @relation(name: "FOR_USE_CASE", direction: "OUT")
  challenges: [Challenge] @relation(name: "FOR_CHALLENGE", direction: "OUT")

  is_candidate_updated: Boolean
  featured: Boolean
}

type GraphGistCandidate implements GraphGistInterface & Asset {
  uuid: ID!
  image: String
  name: String
  slug: String
  summary: String

  title: String

  author: Person @relation(name: "WROTE", direction: "IN")

  is_guide: Boolean

  url: String
  raw_url: String

  asciidoc: String!
  html: String!
  raw_html: String!
  neo4j_version: String

  query_cache: String!
  query_cache_html: String
  has_errors: Boolean!

  status: GraphGistStatus

  cached: Boolean

  legacy_id: String
  legacy_neo_id: Int
  legacy_poster_image: String
  legacy_rated: String

  created_at: DateTime
  updated_at: DateTime

  render_id: String

  graphgist: GraphGist @relation(name: "IS_VERSION", direction: "OUT")

  industries: [Industry] @relation(name: "FOR_INDUSTRY", direction: "OUT")
  use_cases: [UseCase] @relation(name: "FOR_USE_CASE", direction: "OUT")
  challenges: [Challenge] @relation(name: "FOR_CHALLENGE", direction: "OUT")
}
